#!/bin/bash

# Î≥¥Ïïà Í∞êÏÇ¨ Ïä§ÌÅ¨Î¶ΩÌä∏
# cargo-auditÏôÄ cargo-denyÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏùòÏ°¥ÏÑ± Ï∑®ÏïΩÏ†êÏùÑ Í≤ÄÏÇ¨Ìï©ÎãàÎã§.

set -e

echo "üîí Security Audit for Police Thief Game Server"
echo "=============================================="

# cargo-audit ÏÑ§Ïπò ÌôïÏù∏
echo "üì¶ Installing cargo-audit if not already installed..."
if ! command -v cargo-audit &> /dev/null; then
    cargo install cargo-audit
fi

# cargo-deny ÏÑ§Ïπò ÌôïÏù∏
echo "üì¶ Installing cargo-deny if not already installed..."
if ! command -v cargo-deny &> /dev/null; then
    cargo install cargo-deny
fi

# 1. ÏùòÏ°¥ÏÑ± Ï∑®ÏïΩÏ†ê Í≤ÄÏÇ¨
echo ""
echo "1Ô∏è‚É£ Checking for known vulnerabilities with cargo-audit..."
echo "-----------------------------------------------------------"
cargo audit || {
    echo "‚ö†Ô∏è Vulnerabilities found! Please review and update dependencies."
    AUDIT_FAILED=true
}

# 2. ÏùòÏ°¥ÏÑ± ÎùºÏù¥ÏÑºÏä§ Î∞è Î≥¥Ïïà Í≤ÄÏÇ¨
echo ""
echo "2Ô∏è‚É£ Checking dependencies with cargo-deny..."
echo "-------------------------------------------"

# deny.tomlÏù¥ ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ ÏÑ§Ï†ï ÏÉùÏÑ±
if [ ! -f "deny.toml" ]; then
    echo "Creating default deny.toml configuration..."
    cat > deny.toml << 'EOF'
[bans]
multiple-versions = "warn"
wildcards = "allow"
deny = [
    # Î≥¥ÏïàÏÉÅ ÏúÑÌóòÌïú ÌÅ¨Î†àÏù¥Ìä∏Îì§
    { name = "openssl", version = "<0.10.38" },
]

[licenses]
unlicensed = "deny"
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
]
copyleft = "warn"

[sources]
unknown-registry = "warn"
unknown-git = "warn"
EOF
fi

cargo deny check licenses || echo "‚ö†Ô∏è License issues found"
cargo deny check bans || echo "‚ö†Ô∏è Banned dependencies found"

# 3. OWASP Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Í≤ÄÏ¶ù
echo ""
echo "3Ô∏è‚É£ OWASP Security Checklist..."
echo "--------------------------------"

# JWT Secret Í≤ÄÏ¶ù
echo -n "‚úì JWT Secret Key: "
if [ -f ".env" ] && grep -q "JWT_SECRET_KEY" .env; then
    JWT_SECRET=$(grep "JWT_SECRET_KEY" .env | cut -d'=' -f2)
    if [[ ${#JWT_SECRET} -ge 32 ]]; then
        echo "Configured (${#JWT_SECRET} chars)"
    else
        echo "‚ö†Ô∏è Too short (${#JWT_SECRET} chars, minimum 32)"
    fi
else
    echo "‚ùå Not configured"
fi

# TLS ÏÑ§Ï†ï ÌôïÏù∏
echo -n "‚úì TLS Configuration: "
if [ -f ".env" ] && grep -q "ENABLE_TLS=true" .env; then
    echo "Enabled"
else
    echo "‚ö†Ô∏è Disabled (recommended for production)"
fi

# Rate Limiting ÌôïÏù∏
echo -n "‚úì Rate Limiting: "
if [ -f ".env" ] && grep -q "RATE_LIMIT_PER_MINUTE" .env; then
    RATE_LIMIT=$(grep "RATE_LIMIT_PER_MINUTE" .env | cut -d'=' -f2)
    echo "Configured ($RATE_LIMIT req/min)"
else
    echo "Using default (100 req/min)"
fi

# 4. ÏΩîÎìú ÎÇ¥ Î≥¥Ïïà Ìå®ÌÑ¥ Í≤ÄÏÇ¨
echo ""
echo "4Ô∏è‚É£ Checking for insecure code patterns..."
echo "------------------------------------------"

# unwrap() ÏÇ¨Ïö© Í≤ÄÏÇ¨
UNWRAP_COUNT=$(grep -r "\.unwrap()" --include="*.rs" src 2>/dev/null | wc -l || echo "0")
echo "‚Ä¢ unwrap() calls: $UNWRAP_COUNT $([ $UNWRAP_COUNT -gt 0 ] && echo "‚ö†Ô∏è Consider using proper error handling" || echo "‚úì")"

# expect() ÏÇ¨Ïö© Í≤ÄÏÇ¨
EXPECT_COUNT=$(grep -r "\.expect(" --include="*.rs" src 2>/dev/null | wc -l || echo "0")
echo "‚Ä¢ expect() calls: $EXPECT_COUNT $([ $EXPECT_COUNT -gt 50 ] && echo "‚ö†Ô∏è High number of expect() calls" || echo "‚úì")"

# unsafe ÏÇ¨Ïö© Í≤ÄÏÇ¨
UNSAFE_COUNT=$(grep -r "unsafe" --include="*.rs" src 2>/dev/null | wc -l || echo "0")
echo "‚Ä¢ unsafe blocks: $UNSAFE_COUNT $([ $UNSAFE_COUNT -gt 0 ] && echo "‚ö†Ô∏è Review unsafe code carefully" || echo "‚úì")"

# ÌïòÎìúÏΩîÎî©Îêú ÎπÑÎ∞Ä Í≤ÄÏÇ¨
echo -n "‚Ä¢ Hardcoded secrets: "
if grep -r "password\|secret\|api_key" --include="*.rs" src 2>/dev/null | grep -v "// " | grep -q "="; then
    echo "‚ö†Ô∏è Potential hardcoded secrets found"
else
    echo "‚úì None detected"
fi

# 5. Î≥¥Ïïà Í∂åÏû•ÏÇ¨Ìï≠
echo ""
echo "5Ô∏è‚É£ Security Recommendations"
echo "----------------------------"

if [ "$AUDIT_FAILED" = true ]; then
    echo "‚ùó Critical: Fix vulnerability issues found by cargo-audit"
fi

if [ $UNWRAP_COUNT -gt 100 ]; then
    echo "‚ùó High Priority: Replace unwrap() with proper error handling"
fi

if [ $EXPECT_COUNT -gt 100 ]; then
    echo "‚ùó Medium Priority: Review and minimize expect() usage"
fi

echo ""
echo "üìä Security Audit Complete"
echo ""
echo "For production deployment, ensure:"
echo "  1. All vulnerabilities are patched"
echo "  2. TLS is enabled"
echo "  3. Strong JWT secret key is configured"
echo "  4. Rate limiting is properly configured"
echo "  5. All expect()/unwrap() calls are reviewed"
echo ""