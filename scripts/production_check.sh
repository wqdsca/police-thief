#!/bin/bash

# ÌîÑÎ°úÎçïÏÖò Ï§ÄÎπÑ ÏÉÅÌÉú Ï¢ÖÌï© Í≤ÄÏÇ¨ Ïä§ÌÅ¨Î¶ΩÌä∏
# Î™®Îì† ÌîÑÎ°úÎçïÏÖò ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ Ï≤¥ÌÅ¨Ìï©ÎãàÎã§.

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üöÄ Production Readiness Check for Police Thief Game Server"
echo "=========================================================="
echo ""

SCORE=0
MAX_SCORE=100

# 1. ÎπåÎìú Ï≤¥ÌÅ¨
echo "1Ô∏è‚É£ Build Check"
echo "---------------"
if cargo build --release --all 2>/dev/null; then
    echo -e "${GREEN}‚úì${NC} All modules build successfully"
    SCORE=$((SCORE + 15))
else
    echo -e "${RED}‚úó${NC} Build failed"
fi

# 2. ÌÖåÏä§Ìä∏ Ïã§Ìñâ
echo ""
echo "2Ô∏è‚É£ Test Suite"
echo "--------------"
if cargo test --all 2>/dev/null; then
    echo -e "${GREEN}‚úì${NC} All tests pass"
    SCORE=$((SCORE + 15))
else
    echo -e "${YELLOW}‚ö†${NC} Some tests failed"
    SCORE=$((SCORE + 5))
fi

# 3. Î≥¥Ïïà Í≤ÄÏÇ¨
echo ""
echo "3Ô∏è‚É£ Security Check"
echo "------------------"

# JWT Secret
if [ -f ".env" ] && grep -q "JWT_SECRET_KEY" .env; then
    JWT_SECRET=$(grep "JWT_SECRET_KEY" .env | cut -d'=' -f2)
    if [[ ${#JWT_SECRET} -ge 32 ]] && [[ ! "$JWT_SECRET" =~ "REPLACE" ]]; then
        echo -e "${GREEN}‚úì${NC} JWT Secret configured securely"
        SCORE=$((SCORE + 10))
    else
        echo -e "${YELLOW}‚ö†${NC} JWT Secret needs improvement"
        SCORE=$((SCORE + 3))
    fi
else
    echo -e "${RED}‚úó${NC} JWT Secret not configured"
fi

# TLS
if [ -f ".env" ] && grep -q "ENABLE_TLS=true" .env; then
    echo -e "${GREEN}‚úì${NC} TLS enabled"
    SCORE=$((SCORE + 5))
else
    echo -e "${YELLOW}‚ö†${NC} TLS not enabled"
fi

# 4. Î™®ÎãàÌÑ∞ÎßÅ
echo ""
echo "4Ô∏è‚É£ Monitoring"
echo "--------------"

# Prometheus Ï≤¥ÌÅ¨
if grep -q "prometheus" Cargo.toml; then
    echo -e "${GREEN}‚úì${NC} Prometheus metrics configured"
    SCORE=$((SCORE + 10))
else
    echo -e "${RED}‚úó${NC} Prometheus not configured"
fi

# Î°úÍπÖ
if [ -f ".env" ] && grep -q "RUST_LOG" .env; then
    echo -e "${GREEN}‚úì${NC} Logging configured"
    SCORE=$((SCORE + 5))
else
    echo -e "${YELLOW}‚ö†${NC} Logging not configured"
fi

# 5. ÏÑ±Îä• Ï≤¥ÌÅ¨
echo ""
echo "5Ô∏è‚É£ Performance"
echo "---------------"

# Release ÎπåÎìú ÏµúÏ†ÅÌôî
if grep -q "opt-level = 3" Cargo.toml 2>/dev/null || grep -q "lto = true" Cargo.toml 2>/dev/null; then
    echo -e "${GREEN}‚úì${NC} Release optimizations enabled"
    SCORE=$((SCORE + 5))
else
    echo -e "${YELLOW}‚ö†${NC} Consider enabling release optimizations"
fi

# 6. Docker
echo ""
echo "6Ô∏è‚É£ Deployment"
echo "--------------"

if [ -f "Dockerfile" ]; then
    echo -e "${GREEN}‚úì${NC} Dockerfile exists"
    SCORE=$((SCORE + 5))
    
    # Multi-stage ÎπåÎìú Ï≤¥ÌÅ¨
    if grep -q "FROM.*as builder" Dockerfile; then
        echo -e "${GREEN}‚úì${NC} Multi-stage build configured"
        SCORE=$((SCORE + 5))
    fi
    
    # Non-root user Ï≤¥ÌÅ¨
    if grep -q "USER" Dockerfile; then
        echo -e "${GREEN}‚úì${NC} Non-root user configured"
        SCORE=$((SCORE + 5))
    fi
else
    echo -e "${RED}‚úó${NC} Dockerfile not found"
fi

if [ -f "docker-compose.yml" ]; then
    echo -e "${GREEN}‚úì${NC} Docker Compose configured"
    SCORE=$((SCORE + 5))
else
    echo -e "${YELLOW}‚ö†${NC} Docker Compose not configured"
fi

# 7. Î¨∏ÏÑúÌôî
echo ""
echo "7Ô∏è‚É£ Documentation"
echo "-----------------"

if [ -f "README.md" ]; then
    echo -e "${GREEN}‚úì${NC} README.md exists"
    SCORE=$((SCORE + 3))
else
    echo -e "${YELLOW}‚ö†${NC} README.md not found"
fi

if [ -f "CLAUDE.md" ]; then
    echo -e "${GREEN}‚úì${NC} CLAUDE.md exists"
    SCORE=$((SCORE + 2))
else
    echo -e "${YELLOW}‚ö†${NC} CLAUDE.md not found"
fi

# 8. CI/CD
echo ""
echo "8Ô∏è‚É£ CI/CD"
echo "---------"

if [ -d ".github/workflows" ]; then
    echo -e "${GREEN}‚úì${NC} GitHub Actions configured"
    SCORE=$((SCORE + 5))
else
    echo -e "${YELLOW}‚ö†${NC} CI/CD not configured"
fi

# 9. ÏΩîÎìú ÌíàÏßà
echo ""
echo "9Ô∏è‚É£ Code Quality"
echo "----------------"

# Clippy Ïã§Ìñâ
if cargo clippy --all -- -D warnings 2>/dev/null; then
    echo -e "${GREEN}‚úì${NC} No clippy warnings"
    SCORE=$((SCORE + 5))
else
    echo -e "${YELLOW}‚ö†${NC} Clippy warnings found"
    SCORE=$((SCORE + 2))
fi

# Format Ï≤¥ÌÅ¨
if cargo fmt --all -- --check 2>/dev/null; then
    echo -e "${GREEN}‚úì${NC} Code properly formatted"
    SCORE=$((SCORE + 3))
else
    echo -e "${YELLOW}‚ö†${NC} Code needs formatting"
fi

# Í≤∞Í≥º ÏöîÏïΩ
echo ""
echo "==========================================="
echo "üìä Production Readiness Score: ${SCORE}/${MAX_SCORE}"
echo "==========================================="

if [ $SCORE -ge 90 ]; then
    echo -e "${GREEN}üéâ Excellent! Ready for production deployment${NC}"
elif [ $SCORE -ge 75 ]; then
    echo -e "${GREEN}‚úÖ Good! Minor improvements recommended${NC}"
elif [ $SCORE -ge 60 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Fair. Several improvements needed before production${NC}"
else
    echo -e "${RED}‚ùå Not ready. Critical improvements required${NC}"
fi

echo ""
echo "Recommendations:"
if [ $SCORE -lt 15 ]; then
    echo "  ‚Ä¢ Fix build errors"
fi
if [ $SCORE -lt 30 ]; then
    echo "  ‚Ä¢ Ensure all tests pass"
fi
if [ ! -f ".env" ] || ! grep -q "JWT_SECRET_KEY" .env ]; then
    echo "  ‚Ä¢ Configure JWT secret key"
fi
if [ ! -f ".env" ] || ! grep -q "ENABLE_TLS=true" .env ]; then
    echo "  ‚Ä¢ Enable TLS for production"
fi
if ! grep -q "prometheus" Cargo.toml; then
    echo "  ‚Ä¢ Implement Prometheus monitoring"
fi

echo ""
echo "Run specific checks:"
echo "  ./scripts/security_audit.sh - Security audit"
echo "  ./scripts/test_coverage.sh - Test coverage"
echo ""