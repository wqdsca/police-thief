name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # 매일 새벽 2시 보안 스캔
    - cron: '0 2 * * *'

env:
  RUST_VERSION: 1.75.0
  CARGO_TERM_COLOR: always
  PERFORMANCE_BASELINE: 12000  # msg/sec
  MEMORY_LIMIT: 100  # MB
  TEST_COVERAGE_THRESHOLD: 85  # %

jobs:
  # ==========================================
  # Stage 1: 코드 품질 검증
  # ==========================================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    outputs:
      quality-score: ${{ steps.calculate-score.outputs.score }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format Check
        run: cargo fmt --all -- --check

      - name: Clippy Analysis
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::all \
            -D clippy::pedantic \
            -D clippy::nursery \
            -W clippy::cargo

      - name: Count Warnings and Calculate Score
        id: calculate-score
        run: |
          WARNINGS=$(cargo clippy --all 2>&1 | grep -c "warning:" || true)
          UNWRAPS=$(grep -r "\.unwrap()" --include="*.rs" . | wc -l)
          ARC_DYN=$(grep -r "Arc<dyn" --include="*.rs" . | wc -l)
          
          # 점수 계산 (100점 만점)
          SCORE=100
          SCORE=$((SCORE - WARNINGS))
          SCORE=$((SCORE - UNWRAPS * 2))
          SCORE=$((SCORE - ARC_DYN))
          
          echo "::set-output name=score::$SCORE"
          echo "Quality Score: $SCORE/100"
          echo "- Warnings: $WARNINGS"
          echo "- Unwraps: $UNWRAPS"
          echo "- Arc<dyn>: $ARC_DYN"

  # ==========================================
  # Stage 2: 보안 검증
  # ==========================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Security Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: OWASP Dependency Check
        run: |
          cargo install cargo-audit
          cargo audit

      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: SAST Analysis
        run: |
          cargo install cargo-geiger
          cargo geiger --all-features

  # ==========================================
  # Stage 3: 테스트 실행
  # ==========================================
  testing:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Unit Tests
        run: cargo test --all --lib

      - name: Integration Tests
        run: cargo test --all --test '*'
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Test Coverage
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --all --out Xml --output-dir coverage
          
          # 커버리지 확인
          COVERAGE=$(cargo tarpaulin --print-summary | grep "Coverage" | awk '{print $2}' | sed 's/%//')
          if (( $(echo "$COVERAGE < $TEST_COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold $TEST_COVERAGE_THRESHOLD%"
            exit 1
          fi

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/cobertura.xml
          fail_ci_if_error: true

  # ==========================================
  # Stage 4: 성능 검증
  # ==========================================
  performance:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
          override: true

      - name: Build Release
        run: cargo build --release --all

      - name: Start Services
        run: |
          docker-compose up -d redis
          sleep 5

      - name: Performance Benchmark
        run: |
          # TCP 서버 시작
          cargo run --release --bin tcpserver &
          SERVER_PID=$!
          sleep 10
          
          # 부하 테스트 실행
          python tcp_load_test.py --connections 500 --duration 60 --output results.json
          
          # 결과 분석
          THROUGHPUT=$(jq '.throughput' results.json)
          MEMORY=$(jq '.memory_mb' results.json)
          
          # 기준 확인
          if (( $(echo "$THROUGHPUT < $PERFORMANCE_BASELINE" | bc -l) )); then
            echo "Performance regression: $THROUGHPUT msg/sec < $PERFORMANCE_BASELINE"
            exit 1
          fi
          
          if (( $(echo "$MEMORY > $MEMORY_LIMIT" | bc -l) )); then
            echo "Memory usage too high: $MEMORY MB > $MEMORY_LIMIT MB"
            exit 1
          fi
          
          kill $SERVER_PID

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: results.json

  # ==========================================
  # Stage 5: 빌드 및 패키징
  # ==========================================
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    needs: [security, testing, performance]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Build Release
        run: cargo build --release --all

      - name: Create Release Package
        run: |
          mkdir -p release
          cp target/release/tcpserver release/
          cp target/release/grpcserver release/
          cp target/release/quicserver release/
          cp target/release/gamecenter release/
          cp -r property release/
          cp .env.example release/.env
          tar -czf police-thief-${{ matrix.os }}.tar.gz release/

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: police-thief-${{ matrix.os }}
          path: police-thief-${{ matrix.os }}.tar.gz

  # ==========================================
  # Stage 6: 배포 (Production)
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://police-thief.example.com
      
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: police-thief-ubuntu-latest

      - name: Deploy to Kubernetes
        run: |
          # kubectl 설정
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # 배포
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # 롤아웃 대기
          kubectl rollout status deployment/police-thief -n production
          
          # 헬스 체크
          ./scripts/health-check.sh production

      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ==========================================
  # Stage 7: 배포 후 검증
  # ==========================================
  post-deploy-validation:
    name: Post-Deploy Validation
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Smoke Tests
        run: |
          # API 헬스 체크
          curl -f https://police-thief.example.com/health
          
          # 기본 기능 테스트
          ./scripts/smoke-tests.sh production

      - name: Performance Monitoring
        run: |
          # 프로덕션 성능 모니터링
          METRICS=$(curl -s https://police-thief.example.com/metrics)
          THROUGHPUT=$(echo "$METRICS" | grep "throughput" | awk '{print $2}')
          
          if (( $(echo "$THROUGHPUT < $PERFORMANCE_BASELINE" | bc -l) )); then
            echo "Production performance issue detected"
            # 자동 롤백
            kubectl rollout undo deployment/police-thief -n production
            exit 1
          fi

      - name: Security Scan
        run: |
          # 프로덕션 보안 스캔
          ./scripts/production-security-scan.sh

# ==========================================
# 재사용 가능한 워크플로우
# ==========================================
  nightly-maintenance:
    name: Nightly Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *'
    
    steps:
      - uses: actions/checkout@v4

      - name: Dependency Update
        run: |
          cargo update
          cargo audit fix

      - name: Create PR for Updates
        uses: peter-evans/create-pull-request@v5
        with:
          title: '[Auto] Dependency Updates'
          body: 'Automated dependency updates from nightly maintenance'
          branch: auto/dependency-updates